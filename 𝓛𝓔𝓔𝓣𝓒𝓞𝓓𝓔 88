/*
88. Merge Sorted Array

Example 1
Input:  
nums1 = [1, 2, 3, 0, 0, 0], m = 3  
nums2 = [2, 5, 6], n = 3

Output:  
[1, 2, 2, 3, 5, 6]

Explanation:  
We are merging the arrays [1, 2, 3] and [2, 5, 6].  
The merged result is [1, 2, 2, 3, 5, 6].  
The initial elements from nums1 are preserved, and the remaining space is filled with elements from nums2.


Example 2
Input:  
nums1 = [1], m = 1  
nums2 = [], n = 0

Output:  
[1]

Explanation:  
We are merging [1] and an empty array [].  
Since nums2 has no elements, nums1 remains unchanged.


Example 3
Input:  
nums1 = [0], m = 0  
nums2 = [1], n = 1

Output:  
[1]

Explanation:  
We are merging an empty array [] (since m = 0) and [1].  
The 0 in nums1 is just a placeholder to accommodate the merged result.  
After merging, nums1 becomes [1].
*/


public void merge(int[] nums1, int m, int[] nums2, int n) {
	int mIndex = m - 1;
	int nIndex = n - 1;
	for (int right = m + n - 1; right >= 0; right--) {
		if (nIndex < 0)
			break;
		if (mIndex >= 0 && nums1[mIndex] > nums2[nIndex]) {
			nums1[right] = nums1[mIndex];
			mIndex--;
		} else {
			nums1[right] = nums2[nIndex];
			nIndex--;
		}
	}
	System.out.println(Arrays.toString(nums1));
}
